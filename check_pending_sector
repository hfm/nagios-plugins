#!/bin/bash
#
# ## Plugin for Nagios to monitor current pending sectors
# Usage : ./check_pending_sector
# Author: Okumura Takahiro <hfm.garden@gmail.com>
#
# ## Description:
#
# This plugin uses smartctl command to get the number of current pending sectors (S.M.A.R.T ID:197).
#
# Exit Codes
# 0 OK
# 1 Warning  Exceed the warning-threshold.
# 2 Critical Exceed the critical-threchold.
# 3 Unknown  Invalid command line arguments or could not determine used space

LANG=C

usage() {
    cat <<EOT
Usage: `basename $0` [-w|-c|-d|-v]
    -w  warning_threshold
        set warning threshold (default 20)
    -c  critical_threshold
        set critical threshold (default 10)
    -d  device (e.g /dev/sda)
        set device name (default all devices)
    -h  print the help message and exit
EOT
}

# Exit codes
state_ok=0
state_warning=1
state_critical=2
state_unknown=3

# Defaults
warning_threshold="1"
critical_threshold="1"

while getopts "w:c:d:h" opt; do
    case $opt in
        w)
            warning_threshold=$OPTARG
            ;;
        c)
            critical_threshold=$OPTARG
            ;;
        d)
            devices=$OPTARG
            ;;
        *)
            usage
            exit $state_unknown
            ;;
    esac
done

[ -z $devices ] && devices=$(awk '$4 ~ /^[a-z]d[a-z]+$/ {print "/dev/"$4}' /proc/partitions)

smartctl=$(which smartctl)
[ -x "$smartctl" ] || {
    echo "smartctl is not exist."
    exit $state_unknown
}

for dev in $devices; do
    val=$($smartctl -A $dev -d auto | awk '$1==197 {print $NF}')
    info="${info}${dev}:${val}"

    if [ $val -gt $critical_threshold ]; then
        exitstatus=$state_critical
        info="${info}(CRITICAL) "
    elif [ $val -gt $warning_threshold ]; then
        [ "$exitstatus" == $state_critical ] || exitstatus=$state_warning
        info="${info}(WARNING) "
    else
        is_device_support_smart=$($smartctl -A $dev -d auto | grep '=== START OF READ SMART DATA SECTION ===')
        if [ -n "$is_device_support_smart" ]; then
            [ -n "$exitstatus" ] || exitstatus=$state_ok
            info="${info}(OK) "
        else
            [ -n "$exitstatus" ] || exitstatus=$state_unknown
            info="${info}(UNKNOWN) DEVICES DONT SUPPORT SMART"
        fi
    fi
done

[ -n "$exitstatus" ] || {
    exitstatus=$state_ok
    info="params of Current_Pending_Sector is not found."
}

echo $info
exit $exitstatus
